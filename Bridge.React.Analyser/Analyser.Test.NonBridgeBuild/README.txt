Testing an Analyser for a Bridge.NET library is not as straight forward as testing a regular C# library because no single project can load the Bridge library itself AND the standard C# libraries. Since the Analyser requires various "standard C#" libraries (such as Microsoft.CodeAnalysis) and since the Bridge.React library requres Bridge, that would seemingly make it impossible to reference the Bridge.React code to test!

The workaround is to create a separate project that links to the C# files that the Bridge Bridge.React library uses and build them as a standard C# class library - then THIS may be included as a reference in the code samples that are used as targets for the analyser in the unit tests. This is not ideal for several reasons - firstly, any time that a new file is added to the Bridge Bridge.React project, a link to that file must also be added to the "workaround project". Secondly, Bridge.React relies upon the Bridge library and so the parts of that library that are relied upon must be mocked out so that the workaround project actually compiles.

This project is the "regular C# build" of Bridge.React, the "workaround project".